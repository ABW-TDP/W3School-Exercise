**************************CSS Exercise**********************************************

backgroung-repeat: no-repeat || repeat-x || repeat-yx

background-position: top right

background-attachment: fixed

***border shorthand property***
border: 4px dotted red; (border-width	border-style	border-color)

***ROUNDED borders***
border-radius: 5px

margin-left: 20px	(margin-top	margin-right	margin-bottom	margin-left)
margin: 20px 40px  (margin-top&margin-bottom	margin-left&margin-right)

***margin property to center align***
margin: auto

***padding***
padding-right: 20px	(margin-top	margin-right	margin-bottom	margin-left)
padding: 100px padding-top&padding-bottom	padding-left&padding-right)

***Set the height***
height: 100px

***Set the width***
width: 200px

***Set a solid, width outline border***
outline-style: solid
outline-width: 5px
outline-color: red

***outline border shorthand property***
outline: 10px solid blue

***uppercase letters || capitalized letters***
text-transform: uppercase
text-transfrom: capitalize

***text indent to first line***
text-indent: 20px

***Set the font***
font-family: Verdana;

***Set the style to "italic" text***
font-style: italic

***Set the style to "bold" text***
font-weight: bold

***Font Variant (font- property to style the elements as "small-caps")***
font-variant: small-caps

***css link***
/* unvisited link */
a:link {text-decoration: none;}

/* visited link */
a:visited{text-decoration: none;}

/* mouse over link */
a:hover{text-decoration: underline;}

***Set the list style for unordered lists to "square"***
list-style-type: square || circle || upper-roman || lower-alpha 
list-style-image: url("sqpurple.png")
list-style: square inside url("sqpurple.png")

***Collapse the table borders into a single border***
border-collapse: collapse

***Hide the element (hidden with space)***
visibility: hidden

***Hide the element (hidden without space)***
display: none || inline || block

***Position the element to always be 50px from the top, and 10px from the right, relative to the window/frame edges***
position: fixed || static || relative || absolute || sticky
top:50px
right:10px

***top of the page(z-index)***
position: absolute || fixed
top: 0
z-index: 1

***Force a scroll bar to the element***
overflow: scroll

***overflow (do specific height with scroll or auto or etc)***
overflow: scroll || visible || hidden || auto

***overflow with horizontal or vertical scrollbar***
overflow-x: scroll || visible || hidden || auto

***Center Align Elements***
margin: auto

***Center Align Elements with position to right***
margin: auto
position: absolute
right: 0px

***Combinators (Descendant Selector 'space')***
div p{ color: red}

***Combinators (child  Selector '>')***
div > p{ color: red}

***Combinators (adjacent sibling Selector '+')***
div + p{ color: red}

***Combinators (general sibling Selector '~')***
div ~ p{ color: red}

***Pseudo Classes (':')***
a:hover || active || link || first-child || first-of-type || etc {background-color: red}

***Pseudo Element ('::')***
p::first-line || first-letter || before || after || selection || marker {color: red; font-size: 30px;}
::selection{background-color:yellow; color: red;} //For all content 
p::before { content: url('smiley.gif');}

***opacity***
opacity: 50% || 0.4

***Attribute selector***
a["target"] || a["target="_blank"]{background: red}
contains "te" [class*="te"] 
starts with "top" [class^="top"] 
ends with "test" [class$="test"]
[title~="flower"] || [class|="top"] || input[type="text"] {background: red}

***Rounded corners***
border-radius || border-top-right-radius || border-bottom-left-radius :10px

***Border image***
border-image: source slice width outset repeat|initial|inherit;
border:10px solid transparent
border-image: url(border.png) 30 round

***Multiple Backgrounds***
background-image: url("img1.jpg"), url("img2.jpg");
background-repeat: no-repeat, no-repeat;
background-position: left top, right top;
background-origin: content-box;
background-clip: content-box;
background: url("img1.jpg") right top no-repeat, url("img2.jpg") left top auto;

***Color***
--rgba(red, green, blue, alpha)--
background-color: rgba(255, 0, 0, 1.0)<-red color->|| rgba(0, 255, 0, 1.0)<-green->|| rgba(0, 0, 255, 1.0)<-blue->

--hsl(hue, saturation, lightness)-- 
->hue - 0 (or 360) is red || 120 is green || 240 is blue
->Saturation is a percentage value: 100% is the full color.
->Lightness is also a percentage; 0% is dark (black) and 100% is white.
background-color: hsl(0,100%,50%)

--hsla(hue, saturation, lightness, alpha)-- alpha is opacity 
background-color: hsla(0, 100%, 30%, 0.3)

---rgb---
background-color: rgb(255, 0, 0)
opacity:0.4

***Linear Gradients <-linear-gradient(direction, color-stop1, color-stop2, ...)->***
background-image: linear-gradient(red, yellow) <-Direction - top to bottom (this is default)->
background-image: linear-gradient(to right, red , yellow) <- Direction - left to right->
background-image: linear-gradient(to bottom right, red, yellow) <-Direction - top left to bottom right ->
background-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1)) <- use transparency ->

***Linear Gradients <-linear-gradient(angle, color-stop1, color-stop2)->***
background-image: linear-gradient(180deg, red, yellow)

***Repeating a linear-gradient***
background-image: repeating-linear-gradient(red, yellow 10%, green 20%)

***Radial Gradients <-radial-gradient(shape size at position, start-color, ..., last-color)->; like as circle***
background-image: radial-gradient(red, yellow, green)
background-image: radial-gradient(red 5%, yellow 15%, green 60%)
background-image: radial-gradient(circle, red, yellow, green)
background-image: repeating-radial-gradient(red, yellow 10%, green 15%)

***Conic Gradients <- conic-gradient([from angle] [at position,] color [degree], color [degree] ->***
background-image: conic-gradient(red, yellow, green)
background-image: conic-gradient(red 45deg, yellow 90deg, green 210deg)

background-image: conic-gradient(red, yellow, green, blue, black);
border-radius: 50%;

background-image: conic-gradient(at 60% 45%, red, yellow, green)
background-image: conic-gradient(from 90deg, red, yellow, green)
background-image: repeating-conic-gradient(red 10%, yellow 20%)

***Shadow Effects (text-shadow & box-shadow)***
text-shadow: 2px 2px <-horizontal vertical shadow-> || 2px 2px red || 2px 2px 5px red <-5px is blur effect->
text-shadow: -1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue; <-Multiple Shadows->

box-shadow: 10px 10px || 10px 10px lightblue || 10px 10px 5px lightblue
box-shadow: 10px 10px 5px 12px lightblue <- 12px is spread radius>
---inset parameter changes the shadow from an outer shadow (outset) to an inner shadow---
box-shadow: 10px 10px 5px lightblue inset
box-shadow: 5px 5px blue, 10px 10px red, 15px 15px green;<-Multiple Shadows->

***Text Effects (text-overflow, word-wrap, word-break, writing-mode)***
white-space: nowrap
width: 200px
border: 1px solid #000000
overflow: hidden || visible
text-overflow: clip || ellipsis
word-wrap: break-word || keep-all || break-all 
writing-mode: horizontal-tb <-default->||vertical-rl 
word-break : break-all <-can break between any two letters>

***2D Transform***
-translate(X-axis,Y-axis), rotate(deg), scaleX(width), scaleY(height), scale(width,height), 
-skewX(deg), skewY(deg), skew(X-axis deg,Y-axis deg), matrix(scaleX(), skewY(), skewX(), scaleY(), 
-translateX(), translateY())
transform: translate(100px, 200px) || rotate(45deg) || scale(0.5,2) || skew(20deg, 30deg)

***3D Transforms***
transform: rotateX(150deg) || rotateY(120deg) || rotateZ(90deg)

***Transitions (transition,transition-delay,transition-duration,transition-property,transition-timing-function)***
transition: width 2s
transition-timing-function: ease-in-out
transition-delay: 0.5s
transition: background 2s, transform 2s;
transition: width 2s ease-in-out 0.5s; <-shorthand->

***Animation***
@keyframes
animation-name
animation-duration
animation-delay
animation-iteration-count
animation-direction
animation-timing-function
animation-fill-mode
animation shorthand(@keyframes name, duration, timing-function, delay, iteration-count, direction)

@keyframes example {
  from {background-color: red;}
  to {background-color: yellow;}
}

@keyframes example1 {
  0%   {background-color:red; left:0px; top:0px;}
  25%  {background-color:yellow; left:200px; top:0px;}
  50%  {background-color:blue; left:200px; top:200px;}
  75%  {background-color:green; left:0px; top:200px;}
  100% {background-color:red; left:0px; top:0px;}
}

.div1{
  width: 100px;
  height: 100px;
  background-color: red;
  animation-name: example; <--Keyframe name-->
  animation-duration: 4s;
}

.div2{
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
  animation-iteration-count: 2;
  animation-direction: alternate || alternate-reverse
  animation-fill-mode: forwards || backwards || both;
}

#div1 {
animation-timing-function: linear || ease || ease-in|| ease-out || ease-in-out;
}

div{
  animation: example 5s linear 2s infinite alternate;
}








